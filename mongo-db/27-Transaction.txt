Transaction
- Di relational database, fitur yang sangat berguna dan banyak orang gunakan adalah fitur transaction
- Fitur transaction secara sederhana adalah menggabungkan beberapa operasi database dalam satu transaction, dimana transaction akan dianggap sukses jika semua operasi sukses, dan transaction akan dianggap gagal jika ada salah satu operasi yang gagal
- Dan jika transaction gagal, maka seluruh operasi yang sukses sebelumnya harus dibatalkan (rollback)
- Fitur transaction di MongoDB hanya bisa berjalan di cluster (replica-set), tidak di single node dan lebih dari satu node
- Dalam cluster, database di MongoDB akan memiliki primary data dan secondary data


MongoDB Cluster Replica Set 
[gambar]


Transaction Function
session.startTransaction()   -> Memulai transaction
session.commitTransaction()  -> Commit transaction
session.abortTransaction()   -> Membatalkan transaction


Read Preferences
Read preferences adalah bagaimana MongoDB mengontrol dari mana kita membaca data
- primary           : semua query diambil dari primary replica set
- primaryPreferred  : semua query diambil dari primary replica set, namun jika tidak ada di primary replica set, maka diambil dari secondary replica set
- secondary         : semua query diambil dari secondary replica set
- secondaryPreferred: semua query diambil dari secondary replica set, namun jika tidak ada di secondary replica set, maka diambil dari primary replica set
- nearest           : semua query diambil dari replica set paling murah network latency-nya


Read Concern 
Read concern adalah bagaimana MongoDB mengontrol data yang kita dapatkan
- local       : data akan didapatkan di local node
- available   : data akan didapatkan dimanapun (tidak peduli node mana)
- majority    : data akan didapatkan di mayoritas data di semua node
- linearizable: data akan dipastikan data paling terbaru di semua node
- snapshot    : data akan diambil dari mayoritas data snapshot (data yang telah di commit) di semua node


Write Concern
Write concern adalah bagaimana MongoDB mengontrol operasi write (insert, update, delete)
- <number>  : operasi dianggap sukses jika sudah berhasil melakukan operasi write di node sejumlah <number>
- majority  : operasi dianggap sukses jika sudah berhasil melakukan operasi write di mayoritas node


Kode Program

// Setting replication
rs.initiate(
  {
    _id : 'my-mongo-set',
    members: [
      { _id : 0, host : "mongo1:27017" },
      { _id : 1, host : "mongo2:27017" },
      { _id : 2, host : "mongo3:27017" }
    ]
  }
)

// Create collection
db.createCollection("products");
db.createCollection("orders");

// Insert products
db.products.insertMany([
    {
        _id: 1,
        name: "Indomie Ayam Bawang",
        price: new NumberLong(2000),
        quantity: 10
    },
    {
        _id: 2,
        name: "Mie Sedap",
        price: new NumberLong(2000),
        quantity: 10
    }
]);

// Sample abort transaction
var session = db.getMongo().startSession( { readPreference: { mode: "primary" } } );
session.startTransaction( { readConcern: { level: "majority" }, writeConcern: { w: "majority" } } );
session.getDatabase("test").orders.insertOne({
    _id: new ObjectId(),
    total: new NumberLong(8000),
    items: [
        {
            product_id: 1,
            price: new NumberLong(2000),
            quantity: new NumberInt(2)
        },
        {
            product_id: 2,
            price: new NumberLong(2000),
            quantity: new NumberInt(2)
        }
    ]
});
session.getDatabase("test").products.updateOne({
    _id: 1
}, {
    $inc: {
        quantity: -2
    }
});
session.getDatabase("test").products.updateOne({
    _id: 2
}, {
    $inc: {
        quantity: -2
    }
});
session.abortTransaction();
session.endSession();


// Sample commit transaction
var session = db.getMongo().startSession( { readPreference: { mode: "primary" } } );
session.startTransaction( { readConcern: { level: "majority" }, writeConcern: { w: "majority" } } );
session.getDatabase("test").orders.insertOne({
    _id: new ObjectId(),
    total: new NumberLong(8000),
    items: [
        {
            product_id: 1,
            price: new NumberLong(2000),
            quantity: new NumberInt(2)
        },
        {
            product_id: 2,
            price: new NumberLong(2000),
            quantity: new NumberInt(2)
        }
    ]
});
session.getDatabase("test").products.updateOne({
    _id: 1
}, {
    $inc: {
        quantity: -2
    }
});
session.getDatabase("test").products.updateOne({
    _id: 2
}, {
    $inc: {
        quantity: -2
    }
});
session.commitTransaction();
session.endSession();